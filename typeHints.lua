-- DO NOT USE THIS FILE DIRECTLY DUE TO COPYRIGHT ISSUES
-- This file is auto-generated by davinci-resolve-type-hints
-- Just copy this file to your DaVinci Resolve Scripting folder


resolve = resolve ---@type Resolve
app = app ---@type Resolve
fusion = fusion ---@type Fusion
fu = fu ---@type Fusion


-- alias

---@alias Color string
---@alias Duration number
---@alias CustomData string
---@alias Item TimelineItem
---@alias TrackType "video"|"audio"|"subtitle"
---@alias Format "dpx"|"cin"|"tif"|"jpg"|"png"|"ppm"|"bmp"|"xpm"
---@alias MetaDataValue string
---@alias Note string
---@alias Keyframe integer
---@alias Clip MediaPoolItem
---@alias GradeMode "1"|"2"|"3"
---@alias Timecode string
---@alias PropertyKey "Pan"|"Tilt"|"ZoomX"|"ZoomY"|"ZoomGang"|"RotationAngle"|"AnchorPointX"|"AnchorPointY"|"Pitch"|"Yaw"|"FlipX"|"FlipY"|"CropLeft"|"CropRight"|"CropTop"|"CropBottom"|"CropSoftness"|"CropRetain"|"DynamicZoomEase"|"CompositeMode"|"Opacity"|"Distortion"|"RetimeProcess"|"MotionEstimation"|"Scaling"|"ResizeFilter"
---@alias Setting "SelectAllFrames"|"MarkIn"|"MarkOut"|"TargetDir"|"CustomName"|"UniqueFilenameStyle"|"ExportVideo"|"ExportAudio"|"FormatWidth"|"FormatHeight"|"FrameRate"|"PixelAspectRatio"|"VideoQuality"|"AudioCodec"|"AudioBitDepth"|"AudioSampleRate"|"ColorSpaceTag"|"GammaTag"|"ExportAlpha"|"EncodingProfile"|"MultiPassEncode"|"AlphaMode"|"NetworkOptimization"


-- classes

---@class Resolve
---@field Fusion fun(self: Resolve): Fusion Returns the Fusion object. Starting point for Fusion scripts.
---@field GetMediaStorage fun(self: Resolve): MediaStorage Returns the media storage object to query and act on media locations.
---@field GetProjectManager fun(self: Resolve): ProjectManager Returns the project manager object for currently open database.
---@field OpenPage fun(self: Resolve, pageName: string): boolean Switches to indicated page in DaVinci Resolve. Input can be one of ("media", "cut", "edit", "fusion", "color", "fairlight", "deliver").
---@field GetCurrentPage fun(self: Resolve): string Returns the page currently displayed in the main window. Returned value can be one of ("media", "cut", "edit", "fusion", "color", "fairlight", "deliver", None).
---@field GetProductName fun(self: Resolve): string Returns product name.
---@field GetVersion fun(self: Resolve): Versionfield[] Returns list of product version fields in [major, minor, patch, build, suffix] format.
---@field GetVersionString fun(self: Resolve): string Returns product version in "major.minor.patch[suffix].build" format.
---@field LoadLayoutPreset fun(self: Resolve, presetName: string): boolean Loads UI layout from saved preset named 'presetName'.
---@field UpdateLayoutPreset fun(self: Resolve, presetName: string): boolean Overwrites preset named 'presetName' with current UI layout. ExportLayoutPreset(presetName, presetFilePath) --> Bool 
---@field DeleteLayoutPreset fun(self: Resolve, presetName: string): boolean Deletes preset named 'presetName'.
---@field SaveLayoutPreset fun(self: Resolve, presetName: string): boolean Saves current UI layout as a preset named 'presetName'.
---@field ImportLayoutPreset fun(self: Resolve, presetFilePath: string, presetName: string): boolean Imports preset from path 'presetFilePath'. The optional argument 'presetName' specifies how the preset shall be named. If not specified, the preset is named based on the filename.
---@field Quit fun(self: Resolve): nil Quits the Resolve App.

---@class ProjectManager
---@field CreateProject fun(self: ProjectManager, projectName: string): Project Creates and returns a project if projectName (string) is unique, and None if it is not.
---@field DeleteProject fun(self: ProjectManager, projectName: string): boolean Delete project in the current folder if not currently loaded
---@field LoadProject fun(self: ProjectManager, projectName: string): Project Loads and returns the project with name = projectName (string) if there is a match found, and None if there is no matching Project.
---@field GetCurrentProject fun(self: ProjectManager): Project Returns the currently loaded Resolve project.
---@field SaveProject fun(self: ProjectManager): boolean Saves the currently loaded project with its own name. Returns True if successful.
---@field CloseProject fun(self: ProjectManager, project: Project): boolean Closes the specified project without saving.
---@field CreateFolder fun(self: ProjectManager, folderName: string): boolean Creates a folder if folderName (string) is unique.
---@field DeleteFolder fun(self: ProjectManager, folderName: string): boolean Deletes the specified folder if it exists. Returns True in case of success.
---@field GetProjectListInCurrentFolder fun(self: ProjectManager): Projectname[] Returns a list of project names in current folder.
---@field GetFolderListInCurrentFolder fun(self: ProjectManager): string[] Returns a list of folder names in current folder.
---@field GotoRootFolder fun(self: ProjectManager): boolean Opens root folder in database.
---@field GotoParentFolder fun(self: ProjectManager): boolean Opens parent folder of current folder in database if current folder has parent.
---@field GetCurrentFolder fun(self: ProjectManager): string Returns the current folder name.
---@field OpenFolder fun(self: ProjectManager, folderName: string): boolean Opens folder under given name.
---@field ImportProject fun(self: ProjectManager, filePath: string, projectName: string): boolean Imports a project from the file path provided with given project name, if any. Returns True if successful. ExportProject(projectName, filePath, withStillsAndLUTs=True) --> Bool 
---@field RestoreProject fun(self: ProjectManager, filePath: string, projectName: string): boolean Restores a project from the file path provided with given project name, if any. Returns True if successful.
---@field GetCurrentDatabase fun(self: ProjectManager): { [string]: DbInfo} Returns a dictionary (with keys 'DbType', 'DbName' and optional 'IpAddress') corresponding to the current database connection
---@field GetDatabaseList fun(self: ProjectManager): { [string]: DbInfo}[] Returns a list of dictionary items (with keys 'DbType', 'DbName' and optional 'IpAddress') corresponding to all the databases added to Resolve
---@field SetCurrentDatabase fun(self: ProjectManager, dbInfo: { [string]: DbInfo}): boolean Switches current database connection to the database specified by the keys below, and closes any open project.

---@class Project
---@field GetMediaPool fun(self: Project): MediaPool Returns the Media Pool object.
---@field GetTimelineCount fun(self: Project): integer Returns the number of timelines currently present in the project.
---@field GetTimelineByIndex fun(self: Project, idx: integer): Timeline Returns timeline at the given index, 1 <= idx <= project.GetTimelineCount()
---@field GetCurrentTimeline fun(self: Project): Timeline Returns the currently loaded timeline.
---@field SetCurrentTimeline fun(self: Project, timeline: Timeline): boolean Sets given timeline as current timeline for the project. Returns True if successful.
---@field GetGallery fun(self: Project): Gallery Returns the Gallery object.
---@field GetName fun(self: Project): string Returns project name.
---@field SetName fun(self: Project, projectName: string): boolean Sets project name if given projectName (string) is unique.
---@field GetPresetList fun(self: Project): Preset[] Returns a list of presets and their information.
---@field SetPreset fun(self: Project, presetName: string): boolean Sets preset by given presetName (string) into project.
---@field AddRenderJob fun(self: Project): string Adds a render job based on current render settings to the render queue. Returns a unique job id (string) for the new render job.
---@field DeleteRenderJob fun(self: Project, jobId: integer): boolean Deletes render job for input job id (string).
---@field DeleteAllRenderJobs fun(self: Project): boolean Deletes all render jobs in the queue.
---@field GetRenderJobList fun(self: Project): Renderjob[] Returns a list of render jobs and their information.
---@field GetRenderPresetList fun(self: Project): Preset[] Returns a list of render presets and their information.
---@field StartRendering fun(self: Project, jobId: integer, jobId: integer): boolean Starts rendering jobs indicated by the input job ids.
---@field StartRendering fun(self: Project, jobIds...: integer[], isInteractiveMode: IsInteractiveMode): boolean Starts rendering jobs indicated by the input job ids.
---@field StartRendering fun(self: Project, isInteractiveMode: IsInteractiveMode): boolean Starts rendering all queued render jobs. 
---@field StopRendering fun(self: Project): nil Stops any current render processes.
---@field IsRenderingInProgress fun(self: Project): boolean Returns True if rendering is in progress.
---@field LoadRenderPreset fun(self: Project, presetName: string): boolean Sets a preset as current preset for rendering if presetName (string) exists.
---@field SaveAsNewRenderPreset fun(self: Project, presetName: string): boolean Creates new render preset by given name if presetName(string) is unique.
---@field SetRenderSettings fun(self: Project, settings: { [string]: Setting}): boolean Sets given settings for rendering. Settings is a dict, with support for the keys:
---@field GetRenderJobStatus fun(self: Project, jobId: integer): { [string]: Statusinfo} Returns a dict with job status and completion percentage of the job by given jobId (string).
---@field GetSetting fun(self: Project, settingName: string): string Returns value of project setting (indicated by settingName, string). Check the section below for more information.
---@field SetSetting fun(self: Project, settingName: string, settingValue: any): boolean Sets the project setting (indicated by settingName, string) to the value (settingValue, string). Check the section below for more information.
---@field GetRenderFormats fun(self: Project): { [string]: Renderformat} Returns a dict (format -> file extension) of available render formats.
---@field GetRenderCodecs fun(self: Project, renderFormat: RenderFormat): { [string]: Rendercodec} Returns a dict (codec description -> codec name) of available codecs for given render format (string).
---@field GetCurrentRenderFormatAndCodec fun(self: Project): { [string]: Format,codec} Returns a dict with currently selected format 'format' and render codec 'codec'.
---@field SetCurrentRenderFormatAndCodec fun(self: Project, format: Format, codec: Codec): boolean Sets given render format (string) and render codec (string) as options for rendering.
---@field GetCurrentRenderMode fun(self: Project): integer Returns the render mode: 0 - Individual clips, 1 - Single clip.
---@field SetCurrentRenderMode fun(self: Project, renderMode: RenderMode): boolean Sets the render mode. Specify renderMode = 0 for Individual clips, 1 for Single clip.
---@field GetRenderResolutions fun(self: Project, format: Format, codec: Codec): { [string]: Resolution}[] Returns list of resolutions applicable for the given render format (string) and render codec (string). Returns full list of resolutions if no argument is provided. Each element in the list is a dictionary with 2 keys "Width" and "Height".
---@field RefreshLUTList fun(self: Project): boolean Refreshes LUT List
---@field GetUniqueId fun(self: Project): string Returns a unique ID for the project item

---@class MediaStorage
---@field GetMountedVolumeList fun(self: MediaStorage): string[] Returns list of folder paths corresponding to mounted volumes displayed in Resolve’s Media Storage.
---@field GetSubFolderList fun(self: MediaStorage, folderPath: string): string[] Returns list of folder paths in the given absolute folder path.
---@field GetFileList fun(self: MediaStorage, folderPath: string): string[] Returns list of media and file listings in the given absolute folder path. Note that media listings may be logically consolidated entries.
---@field RevealInStorage fun(self: MediaStorage, path: string): boolean Expands and displays given file/folder path in Resolve’s Media Storage.
---@field AddItemListToMediaPool fun(self: MediaStorage, item: Item, item: Item): Clip[] Adds specified file/folder paths from Media Storage into current Media Pool folder. Input is one or more file/folder paths. Returns a list of the MediaPoolItems created.
---@field AddItemListToMediaPool fun(self: MediaStorage, items...: Item[]): Clip[] Adds specified file/folder paths from Media Storage into current Media Pool folder. Input is an array of file/folder paths. Returns a list of the MediaPoolItems created.
---@field AddClipMattesToMediaPool fun(self: MediaStorage, MediaPoolItem: MediaPoolItem, paths: string[], stereoEye: StereoEye): boolean Adds specified media files as mattes for the specified MediaPoolItem. StereoEye is an optional argument for specifying which eye to add the matte to for stereo clips ("left" or "right"). Returns True if successful.
---@field AddTimelineMattesToMediaPool fun(self: MediaStorage, paths: string[]): MediaPoolItem[] Adds specified media files as timeline mattes in current media pool folder. Returns a list of created MediaPoolItems.

---@class MediaPool
---@field GetRootFolder fun(self: MediaPool): string Returns root Folder of Media Pool
---@field AddSubFolder fun(self: MediaPool, folder: string, name: string): string Adds new subfolder under specified Folder object with the given name.
---@field RefreshFolders fun(self: MediaPool): boolean Updates the folders in collaboration mode
---@field CreateEmptyTimeline fun(self: MediaPool, name: string): Timeline Adds new timeline with given name.
---@field AppendToTimeline fun(self: MediaPool, clip: Clip, clip: Clip): TimelineItem[] Appends specified MediaPoolItem objects in the current timeline. Returns the list of appended timelineItems.
---@field AppendToTimeline fun(self: MediaPool, clips: Clip[]): TimelineItem[] Appends specified MediaPoolItem objects in the current timeline. Returns the list of appended timelineItems.
---@field AppendToTimeline fun(self: MediaPool, clipInfo: [{clipInfo}): TimelineItem[] Appends list of clipInfos specified as dict of "mediaPoolItem", "startFrame" (int), "endFrame" (int), (optional) "mediaType" (int; 1 - Video only, 2 - Audio only). Returns the list of appended timelineItems.
---@field CreateTimelineFromClips fun(self: MediaPool, name: string, clip: Clip, clip: Clip): Timeline Creates new timeline with specified name, and appends the specified MediaPoolItem objects.
---@field CreateTimelineFromClips fun(self: MediaPool, name: string, clips: Clip[]): Timeline Creates new timeline with specified name, and appends the specified MediaPoolItem objects.
---@field CreateTimelineFromClips fun(self: MediaPool, name: string, clipInfo: { [string]: ClipInfo}[]): Timeline Creates new timeline with specified name, appending the list of clipInfos specified as a dict of "mediaPoolItem", "startFrame" (int), "endFrame" (int).
---@field ImportTimelineFromFile fun(self: MediaPool, filePath: string, importOptions: { [string]: ImportOption}): Timeline Creates timeline based on parameters within given file and optional importOptions dict, with support for the keys:
---@field DeleteTimelines fun(self: MediaPool, timeline: Timeline[]): boolean Deletes specified timelines in the media pool.
---@field GetCurrentFolder fun(self: MediaPool): string Returns currently selected Folder.
---@field SetCurrentFolder fun(self: MediaPool, Folder: string): boolean Sets current folder by given Folder.
---@field DeleteClips fun(self: MediaPool, clips: Clip[]): boolean Deletes specified clips or timeline mattes in the media pool
---@field DeleteFolders fun(self: MediaPool, subfolders: string[]): boolean Deletes specified subfolders in the media pool
---@field MoveClips fun(self: MediaPool, clips: Clip[], targetFolder: string): boolean Moves specified clips to target folder.
---@field MoveFolders fun(self: MediaPool, folders: string[], targetFolder: string): boolean Moves specified folders to target folder.
---@field GetClipMatteList fun(self: MediaPool, MediaPoolItem: MediaPoolItem): string[] Get mattes for specified MediaPoolItem, as a list of paths to the matte files.
---@field GetTimelineMatteList fun(self: MediaPool, Folder: string): MediaPoolItem[] Get mattes in specified Folder, as list of MediaPoolItems.
---@field DeleteClipMattes fun(self: MediaPool, MediaPoolItem: MediaPoolItem, paths: string[]): boolean Delete mattes based on their file paths, for specified MediaPoolItem. Returns True on success.
---@field RelinkClips fun(self: MediaPool, MediaPoolItem: MediaPoolItem[], folderPath: string): boolean Update the folder location of specified media pool clips with the specified folder path.
---@field UnlinkClips fun(self: MediaPool, MediaPoolItem: MediaPoolItem[]): boolean Unlink specified media pool clips.
---@field ImportMedia fun(self: MediaPool, items...: Item[]): MediaPoolItem[] Imports specified file/folder paths into current Media Pool folder. Input is an array of file/folder paths. Returns a list of the MediaPoolItems created.
---@field ImportMedia fun(self: MediaPool, clipInfo: { [string]: ClipInfo}[]): MediaPoolItem[] Imports file path(s) into current Media Pool folder as specified in list of clipInfo dict. Returns a list of the MediaPoolItems created.
---@field #Example:ImportMedia fun(self: MediaPool, "FilePath":"file_%0d.dpx": string, "StartIndex":: integer, "EndIndex":00: integer): boolean Example: ImportMedia([{"FilePath":"file_%03d.dpx", "StartIndex":1, "EndIndex":100}]) would import clip "file_[001-100].dpx". ExportMetadata(fileName, [clips]) --> Bool 
---@field GetUniqueId fun(self: MediaPool): string Returns a unique ID for the media pool

---@class Folder
---@field GetClipList fun(self: Folder): Clip[] Returns a list of clips (items) within the folder.
---@field GetName fun(self: Folder): string Returns the media folder name.
---@field GetSubFolderList fun(self: Folder): string[] Returns a list of subfolders in the folder.
---@field GetIsFolderStale fun(self: Folder): boolean Returns true if folder is stale in collaboration mode, false otherwise
---@field GetUniqueId fun(self: Folder): string Returns a unique ID for the media pool folder

---@class MediaPoolItem
---@field GetName fun(self: MediaPoolItem): string Returns the clip name.
---@field GetMetadata fun(self: MediaPoolItem, metadataType: MetadataType): String|dict Returns the metadata value for the key 'metadataType'.
---@field SetMetadata fun(self: MediaPoolItem, metadataType: MetadataType, metadataValue: any): boolean Sets the given metadata to metadataValue (string). Returns True if successful.
---@field SetMetadata fun(self: MediaPoolItem, metadata: { [string]: Metadata}): boolean Sets the item metadata with specified 'metadata' dict. Returns True if successful.
---@field GetMediaId fun(self: MediaPoolItem): string Returns the unique ID for the MediaPoolItem.
---@field AddMarker fun(self: MediaPoolItem, frameId: integer, color: Color, name: string, note: Note, duration: number): boolean Creates a new marker at given frameId position and with given marker information. 'customData' is optional and helps to attach user specific data to the marker.
---@field GetMarkers fun(self: MediaPoolItem): { [string]: Marker} Returns a dict (frameId -> {information}) of all markers and dicts with their information.
---@field GetMarkerByCustomData fun(self: MediaPoolItem, customData: CustomData): { [string]: Marker} Returns marker {information} for the first matching marker with specified customData.
---@field UpdateMarkerCustomData fun(self: MediaPoolItem, frameId: integer, customData: CustomData): boolean Updates customData (string) for the marker at given frameId position. CustomData is not exposed via UI and is useful for scripting developer to attach any user specific data to markers.
---@field GetMarkerCustomData fun(self: MediaPoolItem, frameId: integer): string Returns customData string for the marker at given frameId position.
---@field DeleteMarkersByColor fun(self: MediaPoolItem, color: Color): boolean Delete all markers of the specified color from the media pool item. "All" as argument deletes all color markers.
---@field DeleteMarkerAtFrame fun(self: MediaPoolItem, frameNum: integer): boolean Delete marker at frame number from the media pool item.
---@field DeleteMarkerByCustomData fun(self: MediaPoolItem, customData: CustomData): boolean Delete first matching marker with specified customData.
---@field AddFlag fun(self: MediaPoolItem, color: Color): boolean Adds a flag with given color (string).
---@field GetFlagList fun(self: MediaPoolItem): Color[] Returns a list of flag colors assigned to the item.
---@field ClearFlags fun(self: MediaPoolItem, color: Color): boolean Clears the flag of the given color if one exists. An "All" argument is supported and clears all flags.
---@field GetClipColor fun(self: MediaPoolItem): string Returns the item color as a string.
---@field SetClipColor fun(self: MediaPoolItem, colorName: string): boolean Sets the item color based on the colorName (string).
---@field ClearClipColor fun(self: MediaPoolItem): boolean Clears the item color.
---@field GetClipProperty fun(self: MediaPoolItem, propertyName: string): String|dict Returns the property value for the key 'propertyName'. 
---@field SetClipProperty fun(self: MediaPoolItem, propertyName: string, propertyValue: any): boolean Sets the given property to propertyValue (string). Check the section below for more information.
---@field LinkProxyMedia fun(self: MediaPoolItem, proxyMediaFilePath: string): boolean Links proxy media located at path specified by arg 'proxyMediaFilePath' with the current clip. 'proxyMediaFilePath' should be absolute clip path.
---@field UnlinkProxyMedia fun(self: MediaPoolItem): boolean Unlinks any proxy media associated with clip.
---@field ReplaceClip fun(self: MediaPoolItem, filePath: string): boolean Replaces the underlying asset and metadata of MediaPoolItem with the specified absolute clip path.
---@field GetUniqueId fun(self: MediaPoolItem): string Returns a unique ID for the media pool item

---@class Timeline
---@field GetName fun(self: Timeline): string Returns the timeline name.
---@field SetName fun(self: Timeline, timelineName: string): boolean Sets the timeline name if timelineName (string) is unique. Returns True if successful.
---@field GetStartFrame fun(self: Timeline): integer Returns the frame number at the start of timeline.
---@field GetEndFrame fun(self: Timeline): integer Returns the frame number at the end of timeline.
---@field SetStartTimecode fun(self: Timeline, timecode: Timecode): boolean Set the start timecode of the timeline to the string 'timecode'. Returns true when the change is successful, false otherwise.
---@field GetStartTimecode fun(self: Timeline): string Returns the start timecode for the timeline.
---@field GetTrackCount fun(self: Timeline, trackType: TrackType): integer Returns the number of tracks for the given track type ("audio", "video" or "subtitle").
---@field GetItemListInTrack fun(self: Timeline, trackType: TrackType, index: integer): Item[] Returns a list of timeline items on that track (based on trackType and index). 1 <= index <= GetTrackCount(trackType).
---@field AddMarker fun(self: Timeline, frameId: integer, color: Color, name: string, note: Note, duration: number): boolean Creates a new marker at given frameId position and with given marker information. 'customData' is optional and helps to attach user specific data to the marker.
---@field GetMarkers fun(self: Timeline): { [string]: Marker} Returns a dict (frameId -> {information}) of all markers and dicts with their information.
---@field GetMarkerByCustomData fun(self: Timeline, customData: CustomData): { [string]: Marker} Returns marker {information} for the first matching marker with specified customData.
---@field UpdateMarkerCustomData fun(self: Timeline, frameId: integer, customData: CustomData): boolean Updates customData (string) for the marker at given frameId position. CustomData is not exposed via UI and is useful for scripting developer to attach any user specific data to markers.
---@field GetMarkerCustomData fun(self: Timeline, frameId: integer): string Returns customData string for the marker at given frameId position.
---@field DeleteMarkersByColor fun(self: Timeline, color: Color): boolean Deletes all timeline markers of the specified color. An "All" argument is supported and deletes all timeline markers.
---@field DeleteMarkerAtFrame fun(self: Timeline, frameNum: integer): boolean Deletes the timeline marker at the given frame number.
---@field DeleteMarkerByCustomData fun(self: Timeline, customData: CustomData): boolean Delete first matching marker with specified customData.
---@field ApplyGradeFromDRX fun(self: Timeline, path: string, gradeMode: GradeMode, item: Item, item: Item): boolean Loads a still from given file path (string) and applies grade to Timeline Items with gradeMode (int): 0 - "No keyframes", 1 - "Source Timecode aligned", 2 - "Start Frames aligned".
---@field ApplyGradeFromDRX fun(self: Timeline, path: string, gradeMode: GradeMode, items: Item[]): boolean Loads a still from given file path (string) and applies grade to Timeline Items with gradeMode (int): 0 - "No keyframes", 1 - "Source Timecode aligned", 2 - "Start Frames aligned".
---@field GetCurrentTimecode fun(self: Timeline): string Returns a string timecode representation for the current playhead position, while on Cut, Edit, Color, Fairlight and Deliver pages.
---@field SetCurrentTimecode fun(self: Timeline, timecode: Timecode): boolean Sets current playhead position from input timecode for Cut, Edit, Color, Fairlight and Deliver pages.
---@field GetCurrentVideoItem fun(self: Timeline): Item Returns the current video timeline item.
---@field GetCurrentClipThumbnailImage fun(self: Timeline): { [string]: ThumbnailData} Returns a dict (keys "width", "height", "format" and "data") with data containing raw thumbnail image data (RGB 8-bit image data encoded in base64 format) for current media in the Color Page.
---@field GetTrackName fun(self: Timeline, trackType: TrackType, trackIndex: integer): string Returns the track name for track indicated by trackType ("audio", "video" or "subtitle") and index. 1 <= trackIndex <= GetTrackCount(trackType).
---@field SetTrackName fun(self: Timeline, trackType: TrackType, trackIndex: integer, name: string): boolean Sets the track name (string) for track indicated by trackType ("audio", "video" or "subtitle") and index. 1 <= trackIndex <= GetTrackCount(trackType).
---@field DuplicateTimeline fun(self: Timeline, timelineName: string): Timeline Duplicates the timeline and returns the created timeline, with the (optional) timelineName, on success.
---@field CreateCompoundClip fun(self: Timeline, timelineItems: TimelineItem[], clipInfo: { [string]: ClipInfo}): TimelineItem Creates a compound clip of input timeline items with an optional clipInfo map: {"startTimecode" : "00:00:00:00", "name" : "Compound Clip 1"}. It returns the created timeline item.
---@field CreateFusionClip fun(self: Timeline, timelineItems: TimelineItem[]): TimelineItem Creates a Fusion clip of input timeline items. It returns the created timeline item.
---@field ImportIntoTimeline fun(self: Timeline, filePath: string, importOptions: { [string]: ImportOption}): boolean Imports timeline items from an AAF file and optional importOptions dict into the timeline, with support for the keys:
---@field Export fun(self: Timeline, fileName: string, exportType: ExportType, exportSubtype: ExportSubtype): boolean Exports timeline to 'fileName' as per input exportType & exportSubtype format.
---@field GetSetting fun(self: Timeline, settingName: string): string Returns value of timeline setting (indicated by settingName : string). Check the section below for more information.
---@field SetSetting fun(self: Timeline, settingName: string, settingValue: any): boolean Sets timeline setting (indicated by settingName : string) to the value (settingValue : string). Check the section below for more information.
---@field InsertGeneratorIntoTimeline fun(self: Timeline, generatorName: string): TimelineItem Inserts a generator (indicated by generatorName : string) into the timeline.
---@field InsertFusionGeneratorIntoTimeline fun(self: Timeline, generatorName: string): TimelineItem Inserts a Fusion generator (indicated by generatorName : string) into the timeline.
---@field InsertFusionCompositionIntoTimeline fun(self: Timeline): TimelineItem Inserts a Fusion composition into the timeline.
---@field InsertOFXGeneratorIntoTimeline fun(self: Timeline, generatorName: string): TimelineItem Inserts an OFX generator (indicated by generatorName : string) into the timeline.
---@field InsertTitleIntoTimeline fun(self: Timeline, titleName: string): TimelineItem Inserts a title (indicated by titleName : string) into the timeline.
---@field InsertFusionTitleIntoTimeline fun(self: Timeline, titleName: string): TimelineItem Inserts a Fusion title (indicated by titleName : string) into the timeline.
---@field GrabStill fun(self: Timeline): GalleryStill Grabs still from the current video clip. Returns a GalleryStill object.
---@field GrabAllStills fun(self: Timeline, stillFrameSource: integer): GalleryStill[] Grabs stills from all the clips of the timeline at 'stillFrameSource' (1 - First frame, 2 - Middle frame). Returns the list of GalleryStill objects.
---@field GetUniqueId fun(self: Timeline): string Returns a unique ID for the timeline

---@class TimelineItem
---@field GetName fun(self: TimelineItem): string Returns the item name.
---@field GetDuration fun(self: TimelineItem): integer Returns the item duration.
---@field GetEnd fun(self: TimelineItem): integer Returns the end frame position on the timeline.
---@field GetFusionCompCount fun(self: TimelineItem): integer Returns number of Fusion compositions associated with the timeline item.
---@field GetFusionCompByIndex fun(self: TimelineItem, compIndex: integer): FusionComp Returns the Fusion composition object based on given index. 1 <= compIndex <= timelineItem.GetFusionCompCount()
---@field GetFusionCompNameList fun(self: TimelineItem): string[] Returns a list of Fusion composition names associated with the timeline item.
---@field GetFusionCompByName fun(self: TimelineItem, compName: string): FusionComp Returns the Fusion composition object based on given name.
---@field GetLeftOffset fun(self: TimelineItem): integer Returns the maximum extension by frame for clip from left side.
---@field GetRightOffset fun(self: TimelineItem): integer Returns the maximum extension by frame for clip from right side.
---@field GetStart fun(self: TimelineItem): integer Returns the start frame position on the timeline.
---@field SetProperty fun(self: TimelineItem, propertyKey: PropertyKey, propertyValue: any): boolean Sets the value of property "propertyKey" to value "propertyValue"
---@field GetProperty fun(self: TimelineItem, propertyKey: PropertyKey): Int/[key:value] returns the value of the specified key
---@field AddMarker fun(self: TimelineItem, frameId: integer, color: Color, name: string, note: Note, duration: number): boolean Creates a new marker at given frameId position and with given marker information. 'customData' is optional and helps to attach user specific data to the marker.
---@field GetMarkers fun(self: TimelineItem): { [string]: Marker} Returns a dict (frameId -> {information}) of all markers and dicts with their information.
---@field GetMarkerByCustomData fun(self: TimelineItem, customData: CustomData): { [string]: Marker} Returns marker {information} for the first matching marker with specified customData.
---@field UpdateMarkerCustomData fun(self: TimelineItem, frameId: integer, customData: CustomData): boolean Updates customData (string) for the marker at given frameId position. CustomData is not exposed via UI and is useful for scripting developer to attach any user specific data to markers.
---@field GetMarkerCustomData fun(self: TimelineItem, frameId: integer): string Returns customData string for the marker at given frameId position.
---@field DeleteMarkersByColor fun(self: TimelineItem, color: Color): boolean Delete all markers of the specified color from the timeline item. "All" as argument deletes all color markers.
---@field DeleteMarkerAtFrame fun(self: TimelineItem, frameNum: integer): boolean Delete marker at frame number from the timeline item.
---@field DeleteMarkerByCustomData fun(self: TimelineItem, customData: CustomData): boolean Delete first matching marker with specified customData.
---@field AddFlag fun(self: TimelineItem, color: Color): boolean Adds a flag with given color (string).
---@field GetFlagList fun(self: TimelineItem): Color[] Returns a list of flag colors assigned to the item.
---@field ClearFlags fun(self: TimelineItem, color: Color): boolean Clear flags of the specified color. An "All" argument is supported to clear all flags. 
---@field GetClipColor fun(self: TimelineItem): string Returns the item color as a string.
---@field SetClipColor fun(self: TimelineItem, colorName: string): boolean Sets the item color based on the colorName (string).
---@field ClearClipColor fun(self: TimelineItem): boolean Clears the item color.
---@field AddFusionComp fun(self: TimelineItem): FusionComp Adds a new Fusion composition associated with the timeline item.
---@field ImportFusionComp fun(self: TimelineItem, path: string): FusionComp Imports a Fusion composition from given file path by creating and adding a new composition for the item. ExportFusionComp(path, compIndex) --> Bool 
---@field DeleteFusionCompByName fun(self: TimelineItem, compName: string): boolean Deletes the named Fusion composition.
---@field LoadFusionCompByName fun(self: TimelineItem, compName: string): FusionComp Loads the named Fusion composition as the active composition.
---@field RenameFusionCompByName fun(self: TimelineItem, oldName: string, newName: string): boolean Renames the Fusion composition identified by oldName.
---@field AddVersion fun(self: TimelineItem, versionName: string, versionType: VersionType): boolean Adds a new color version for a video clip based on versionType (0 - local, 1 - remote).
---@field GetCurrentVersion fun(self: TimelineItem): { [string]: string} Returns the current version of the video clip. The returned value will have the keys versionName and versionType(0 - local, 1 - remote).
---@field DeleteVersionByName fun(self: TimelineItem, versionName: string, versionType: VersionType): boolean Deletes a color version by name and versionType (0 - local, 1 - remote).
---@field LoadVersionByName fun(self: TimelineItem, versionName: string, versionType: VersionType): boolean Loads a named color version as the active version. versionType: 0 - local, 1 - remote.
---@field RenameVersionByName fun(self: TimelineItem, oldName: string, newName: string, versionType: VersionType): boolean Renames the color version identified by oldName and versionType (0 - local, 1 - remote).
---@field GetVersionNameList fun(self: TimelineItem, versionType: VersionType): string[] Returns a list of all color versions for the given versionType (0 - local, 1 - remote).
---@field GetMediaPoolItem fun(self: TimelineItem): MediaPoolItem Returns the media pool item corresponding to the timeline item if one exists.
---@field GetStereoConvergenceValues fun(self: TimelineItem): { [string]: Keyframe} Returns a dict (offset -> value) of keyframe offsets and respective convergence values.
---@field GetStereoLeftFloatingWindowParams fun(self: TimelineItem): { [string]: Keyframe} For the LEFT eye -> returns a dict (offset -> dict) of keyframe offsets and respective floating window params. Value at particular offset includes the left, right, top and bottom floating window values.
---@field GetStereoRightFloatingWindowParams fun(self: TimelineItem): { [string]: Keyframe} For the RIGHT eye -> returns a dict (offset -> dict) of keyframe offsets and respective floating window params. Value at particular offset includes the left, right, top and bottom floating window values.
---@field GetNumNodes fun(self: TimelineItem): integer Returns the number of nodes in the current graph for the timeline item
---@field SetLUT fun(self: TimelineItem, nodeIndex: integer, lutPath: string): boolean Sets LUT on the node mapping the node index provided, 1 <= nodeIndex <= total number of nodes.
---@field GetLUT fun(self: TimelineItem, nodeIndex: integer): string Gets relative LUT path based on the node index provided, 1 <= nodeIndex <= total number of nodes.
---@field SetCDL fun(self: TimelineItem, CDLmap: CDLmap[]): boolean Keys of map are: "NodeIndex", "Slope", "Offset", "Power", "Saturation", where 1 <= NodeIndex <= total number of nodes.
---@field AddTake fun(self: TimelineItem, mediaPoolItem: MediaPoolItem, startFrame: integer, endFrame: integer): boolean Adds mediaPoolItem as a new take. Initializes a take selector for the timeline item if needed. By default, the full clip extents is added. startFrame (int) and endFrame (int) are optional arguments used to specify the extents.
---@field GetSelectedTakeIndex fun(self: TimelineItem): integer Returns the index of the currently selected take, or 0 if the clip is not a take selector.
---@field GetTakesCount fun(self: TimelineItem): integer Returns the number of takes in take selector, or 0 if the clip is not a take selector.
---@field GetTakeByIndex fun(self: TimelineItem, idx: integer): { [string]: TakeInfo} Returns a dict (keys "startFrame", "endFrame" and "mediaPoolItem") with take info for specified index.
---@field DeleteTakeByIndex fun(self: TimelineItem, idx: integer): boolean Deletes a take by index, 1 <= idx <= number of takes.
---@field SelectTakeByIndex fun(self: TimelineItem, idx: integer): boolean Selects a take by index, 1 <= idx <= number of takes.
---@field FinalizeTake fun(self: TimelineItem): boolean Finalizes take selection.
---@field CopyGrades fun(self: TimelineItem, tgtTimelineItems: TimelineItem[]): boolean Copies the current grade to all the items in tgtTimelineItems list. Returns True on success and False if any error occurred.
---@field UpdateSidecar fun(self: TimelineItem): boolean Updates sidecar file for BRAW clips or RMD file for R3D clips.
---@field GetUniqueId fun(self: TimelineItem): string Returns a unique ID for the timeline item

---@class Gallery
---@field GetAlbumName fun(self: Gallery, galleryStillAlbum: GalleryStillAlbum): string Returns the name of the GalleryStillAlbum object 'galleryStillAlbum'.
---@field SetAlbumName fun(self: Gallery, galleryStillAlbum: GalleryStillAlbum, albumName: string): boolean Sets the name of the GalleryStillAlbum object 'galleryStillAlbum' to 'albumName'.
---@field GetCurrentStillAlbum fun(self: Gallery): GalleryStillAlbum Returns current album as a GalleryStillAlbum object.
---@field SetCurrentStillAlbum fun(self: Gallery, galleryStillAlbum: GalleryStillAlbum): boolean Sets current album to GalleryStillAlbum object 'galleryStillAlbum'.
---@field GetGalleryStillAlbums fun(self: Gallery): GalleryStillAlbum[] Returns the gallery albums as a list of GalleryStillAlbum objects.

---@class GalleryStillAlbum
---@field GetStills fun(self: GalleryStillAlbum): GalleryStill[] Returns the list of GalleryStill objects in the album.
---@field GetLabel fun(self: GalleryStillAlbum, galleryStill: GalleryStill): string Returns the label of the galleryStill.
---@field SetLabel fun(self: GalleryStillAlbum, galleryStill: GalleryStill, label: string): boolean Sets the new 'label' to GalleryStill object 'galleryStill'. ExportStills([galleryStill], folderPath, filePrefix, format) --> Bool 
---@field DeleteStills fun(self: GalleryStillAlbum, galleryStill: GalleryStill[]): boolean Deletes specified list of GalleryStill objects '[galleryStill]'.

---@class GalleryStill # This class does not provide any API functions but the object type is used by functions in other classes.

